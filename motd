#!/usr/bin/env python3
# Using: http://patorjk.com/software/taag
#
# Requires editing /etc/pam.d/login:
# `echo -e "session optional pam_exec.so stdout /path/to/motd" >> /etc/pam.d/login`

import re, os
from subprocess import check_output

class Colors:
   # ANSI escape colors
   Black    = '\u001b[30m'  ;  brBlack     = '\u001b[30;1m'
   Red      = '\u001b[31m'  ;  brRed       = '\u001b[31;1m'
   Green    = '\u001b[32m'  ;  brGreen     = '\u001b[32;1m'
   Yellow   = '\u001b[33m'  ;  brYellow    = '\u001b[33;1m'
   Blue     = '\u001b[34m'  ;  brBlue      = '\u001b[34;1m'
   Magenta  = '\u001b[35m'  ;  brMagenta   = '\u001b[35;1m'
   Cyan     = '\u001b[36m'  ;  brCyan      = '\u001b[36;1m'
   White    = '\u001b[37m'  ;  brWhite     = '\u001b[37;1m'

   Reset = '\u001b[0m'

   # 256 colors in the form of: \u001b[38;5;{color_number}m
   c = lambda x: f'\u001b[38;5;{x}m'

   if os.environ.get('TERM') == 'linux':
      FG     = brRed
      BG     = brBlack
      TEXT   = White
      ACCENT = brYellow
      GOOD   = brGreen
      WARN   = brYellow
      CRIT   = brRed
   else:
      FG     = Red
      BG     = Black
      TEXT   = Cyan
      ACCENT = Yellow
      GOOD   = Green
      WARN   = Yellow
      CRIT   = Red

#==============================================================================
#                              senatus populusque
#------------------------------------------------------------------------------
print(f'''{Colors.FG}
                   _                              _
   ___ ___ ___ ___| |_ _ _ ___    ___ ___ ___ _ _| |_ _ ___ ___ _ _ ___
  |_ -| -_|   | .'|  _| | |_ -|  | . | . | . | | | | | |_ -| . | | | -_|
  |___|___|_|_|__,|_| |___|___|  |  _|___|  _|___|_|___|___|_  |___|___|
                                 |_|     |_|                 |_|
   {Colors.Reset}''')

#==============================================================================
#                                R O M A N U S
#------------------------------------------------------------------------------
ROMANUS = [
   "      ██████╗  ██████╗ ███╗   ███╗ █████╗ ███╗   ██╗██╗   ██╗███████╗ ",
   "      ██╔══██╗██╔═══██╗████╗ ████║██╔══██╗████╗  ██║██║   ██║██╔════╝ ",
   "      ██████╔╝██║   ██║██╔████╔██║███████║██╔██╗ ██║██║   ██║███████╗ ",
   "      ██╔══██╗██║   ██║██║╚██╔╝██║██╔══██║██║╚██╗██║██║   ██║╚════██║ ",
   "      ██║  ██║╚██████╔╝██║ ╚═╝ ██║██║  ██║██║ ╚████║╚██████╔╝███████║ ",
   "      ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝ \n"]

for line in ROMANUS:
   line = re.sub('█', f'{Colors.FG}█{Colors.Reset}', line)
   line = re.sub(r'([╗═╔╚║╝])', f'{Colors.BG}\\1{Colors.Reset}', line)
   print(line)

#==============================================================================
#                                    STATS
#------------------------------------------------------------------------------
spacer = ' '

#-----| User |-----#
user = os.environ.get('USER')

#-----| IP addr |-----#
ip_addr = None
_ip_addr = check_output(['ip', '-f', 'inet', '-4', '-br', 'address']).decode()
for addr in _ip_addr.split('\n'):
   if 'enp' in addr:
      ip_addr = addr.split()[2]

      address = re.compile(r'([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3})(\.[\d]{1,3})(/[\d]{1,2})')
      ip_addr = re.sub(address, f'{Colors.TEXT}\\1{Colors.ACCENT}\\2{Colors.TEXT}\\3{Colors.Reset}', ip_addr)

#-----| CPU/RAM |-----#
_free_mem = check_output(['free', '-mh']).decode()
for line in _free_mem.split('\n'):
   parts = line.split()
   if 'Mem' not in parts[0]:
      continue

   mem_total = parts[1]
   mem_used = parts[2]
   break

free_mem = f'{Colors.TEXT}{mem_used}/{mem_total}{Colors.Reset}'

_free_cpu = check_output(['top', '-n', '1']).decode()
for line in _free_cpu.split('\n'):
   parts = line.split()
   if 'Cpu(s)' not in line:
      continue

   free_cpu = parts[1].split()[0]
   break

free_cpu = f'{Colors.TEXT}{free_cpu}%{Colors.Reset}'

#-----| Temperature |-----#
_temp = check_output(['sensors']).decode()
for idx,line in enumerate(_temp.split('\n')):
   if idx == 2:
      parts = line.split()
      temp = parts[3]
      temp_high = parts[6]
      temp_crit = parts[9]

float_temp = float(re.sub(r'[^\d\.]', '', temp))
float_temp_high = float(re.sub(r'[^\d\.]', '', temp_high))
float_temp_crit = float(re.sub(r'[^\d\.]', '', temp_crit))

temp_color = None
if float_temp < float_temp_high:
   temp_color = Colors.GOOD
elif float_temp >= float_temp_high and float_temp < float_temp_crit:
   temp_color = Colors.WARN
elif float_temp >= float_temp_crit:
   temp_color = Colors.CRIT

#-----| Uptime |-----#
_uptime = check_output(['uptime']).decode()
_uptime = _uptime.split(',', 1)[0]
uptime = _uptime.split('up')[1].strip()

#-----| Upgradable |-----#
_upgrade = check_output(['pacman', '-Qe']).decode()
upgrade = len(_upgrade.split('\n'))

#==============================================================================
#                                Format & Print
#------------------------------------------------------------------------------
# Spacer:
print(f'{spacer * 12}{Colors.BG}{"─" * 50}{Colors.Reset}')
print(f'{spacer * 24}    Welcome     {Colors.FG}{user}{Colors.Reset}')

# Spacer:
print(f'{spacer * 24}    {Colors.BG}────────────────────{Colors.Reset}')
print(f'{spacer * 24}     Uptime     {Colors.ACCENT}{uptime}{Colors.Reset}')
print(f'{spacer * 24}    IP Addr     {ip_addr}{Colors.Reset}')
print(f'{spacer * 24}        Sys     {free_cpu} {temp_color}{temp} {Colors.BG}CPU{Colors.Reset}')
print(f'{spacer * 24}                {free_mem} {Colors.BG}RAM{Colors.Reset}')
print(f'{spacer * 24}                {Colors.TEXT}({upgrade}) {Colors.BG}packages{Colors.Reset}')

# Spacer:
print(f'{spacer * 12}{Colors.BG}{"─" * 50}{Colors.Reset}\n')
