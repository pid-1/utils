#!/usr/bin/env python3
# conf v2.0
#
# Ground-up rewrite of last version of `conf`
#
# No pytests or coverage yet. Just did a cursory CLI test for
# functionality. Certainly bugs. But seems to work alright. Will return
# to clean up syntax at a later date.

import os, sys, json, argparse
from shutil     import which
from textwrap   import dedent
from easydict   import EasyDict
from pathlib    import Path
from tabulate   import tabulate
from subprocess import Popen

class C:
   bk  = u'\u001b[30m'
   rd  = u'\u001b[31m'
   yl  = u'\u001b[33m'
   gr  = u'\u001b[32m'
   br  = u'\u001b[37;1m'
   rst = u'\u001b[0m'


g = EasyDict()
def config():
   g.data = Path.home() / '.config/hre-utils/dotfiles.json'
   if not g.data.parent.exists():
      g.data.parent.mkdir(parents='True')

   if not g.data.exists():
      print(f'{C.br}◆{C.rst} Notice:')
      print(f'    ├── Data file not found. Creating:')
      print(f'    └── {g.data}')
      g.data.write_text('{}')

   g.editor = load_editor()


def load_data():
   with g.data.open('r') as f:
      return json.load(f)


def store_data(data):
   with g.data.open('w+') as f:
      json.dump(data, f, indent=4)


def load_editor():
   '''
   Order, top to bottom:
      0. entry in .json file
      1. env['EDITOR']
      2. Installed
         1. vim
         2. emacs
      3. If none yet, prompt user
   '''
   # EDIT
   # This whole section needs to be cleaned up. It 'works', but it's not
   # elegant by any stretch of the imagination.

   data = load_data()
   editor_saved = False

   def saved_editor():
      try:
         return data['System'].get('Editor')
         editor_saved = True
      except KeyError:
         return None


   def prompt_editor():
      acceptable_editors = ['vim', 'emacs']
      editor = input(f'Select between {acceptable_editors}\n> ')
      if editor not in acceptable_editors:
         prompt_editor()
      return editor

   #                             Find Editor
   #----------------------------------------------------------------------------
   # Cascading list of options, priority is top to bottom
   editor = saved_editor() \
         or os.environ.get('EDITOR') \
         or which('vim') \
         or which('emacs') \
         or prompt_editor()

   if not editor_saved:
      if 'System' not in data:
         data['System'] = {}
      data['System']['Editor'] = editor
      store_data(data)

   return which(editor)


def parsearger():
   '''
   Parses CLI args.

   Add files to edit with a easy to remember/type shorted nickname.
   Run with the nickname of a saved file to bring up in your defined editor.
   '''
   parser = argparse.ArgumentParser(description=dedent('''\
         Utility to allow for easy dotfile edits, without memorizing
         the location of every config file on your system.
         '''),
         usage=f'{C.br}%(prog)s [edit] [--add -p PATH -n NAME] [--dump]{C.rst}',
         formatter_class = argparse.RawTextHelpFormatter)

   parser.add_argument('edit',
      help     = 'Nickname of file to edit',
      nargs    = '?')
   parser.add_argument('-a', '--add',
      help     = f'Add new file to the config manager (requires {C.br}-p{C.rst} & {C.br}-n{C.rst} flags)',
      action   = 'store_true',
      default  = False,
      required = False)
   parser.add_argument('-p', '--path',
      help     = 'Path to the file',
      metavar  = f'{C.br}PATH{C.rst}',
      default  = False,
      required = False)
   parser.add_argument('-n', '--nickname',
      help     = 'Nickname of the file',
      metavar  = f'{C.br}NAME{C.rst}',
      dest     = 'name',
      default  = False,
      required = False)
   parser.add_argument('-d', '--dump',
      help     = 'Prints saved files to stdout',
      action   = 'store_true',
      required = False)
   parser.add_argument('-m', '--manual',
      help     = 'Opens .json data file for manual editing',
      action   = 'store_true',
      required = False)

   if len(sys.argv) == 1:
      parser.print_help()

   return parser.parse_args().__dict__


def handle_args(edit, add, path, name, dump, manual):
   '''
   Takes parsed args, handles pre-determined actions for them.
   Most of the tests for validity are done here.
   '''
   data = load_data()

   #                                 EDIT
   #----------------------------------------------------------------------------
   if edit:
      try:
         path = data['Files'].get(edit)
         if not path:
            raise ValueError

         Popen([g.editor, path]).communicate()

      except KeyError:
         print(f'{C.rd}◆{C.rst} Error:')
         print(f'    └── No files added yet')
         raise SystemExit

      except ValueError:
         print(f'{C.rd}◆{C.rst} Error:')
         print(f'    └── File "{C.br}{edit}{C.rst}" not found')
         raise SystemExit

   #                                 ADD
   #----------------------------------------------------------------------------
   if add:
      verify_add(path, name)
      if 'Files' not in data:
         data['Files'] = {}

      data['Files'][name] = str(Path(path).expanduser())
      store_data(data)

      print(f'{C.gr}◆{C.rst} Saved:')
      print(f'    └── "{C.br}{path}{C.rst}" stored as "{C.br}{name}{C.rst}"')

   #                                 DUMP
   #----------------------------------------------------------------------------
   if dump:
      data = load_data()
      if 'Files' in data:
         table = [[name,path] for name,path in data.get('Files').items()]
         print(tabulate(table))

   #                                MANUAL
   #----------------------------------------------------------------------------
   if manual:
      Popen([g.editor, g.data]).communicate()


def verify_add(path, name):
   errors = []

   if not path:
      errors.append(f'missing arg: {C.rd}-p{C.rst} or {C.rd}--path{C.rst}')
   else:
      if not Path(path).expanduser().exists():
         errors.append(f'path ({C.br}{path}{C.rst}) does not exist')

   if not name:
      errors.append(f'missing arg: {C.rd}-n{C.rst} or {C.rd}--name{C.rst}')

   if errors:
      print(f'{C.rd}◆{C.rst} Errors:')
      for idx,e in enumerate(errors):
         if idx < (len(errors) - 1):
            print('    ├── ', end='')
         else:
            print('    └── ', end='')
         print(e)
      raise SystemExit


if __name__ == '__main__':
   config()
   handle_args(**parsearger())
